<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>API Gateway on AI Tech Blog</title>
    <link>http://localhost:1313/tags/api-gateway/</link>
    <description>Recent content in API Gateway on AI Tech Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Apr 2018 09:32:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/api-gateway/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Service Mesh 和 API Gateway的关系探讨（译文）</title>
      <link>http://localhost:1313/2018/04/11/service-mesh-vs-api-gateway/</link>
      <pubDate>Wed, 11 Apr 2018 09:32:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/04/11/service-mesh-vs-api-gateway/</guid>
      <description>&lt;h2 id=&#34;service-mesh-vs-api-gateway&#34;&gt;Service Mesh vs API Gateway&lt;/h2&gt;&#xA;&lt;p&gt;在&lt;a href=&#34;https://medium.com/microservices-in-practice/service-mesh-for-microservices-2953109a3c9a&#34;&gt;前一篇关于Service Mesh的文章&lt;/a&gt;中,我提到了几个关于Service Mesh和API Gateway之间关系的问题，在本篇文章中，我打算就Service Mesh和API Gateway的用途进行进一步讨论。&lt;/p&gt;&#xA;&lt;p&gt;为了区分API Gateway和Service Mesh，让我们先分别看看两者各自的关键特征。&lt;/p&gt;&#xA;&lt;h2 id=&#34;api-gateway-将服务作为被管理的api向外部暴露&#34;&gt;API Gateway: 将服务作为被管理的API向外部暴露&lt;/h2&gt;&#xA;&lt;p&gt;使用API Gateway的主要目的是将微服务作为被管理的API暴露（给外部系统）。因此，我们在API Gateway层开发的API或者边界服务对外提供了业务功能。&lt;/p&gt;&#xA;&lt;p&gt;API/边界服务调用下游的组合或者原子微服务，通过组合/混装多个下游微服务的方式来提供业务逻辑。&lt;/p&gt;&#xA;&lt;p&gt;在API/Edge服务调用下游服务时，需要采用一种可靠的通信方式，应用了断路器，超时，负载均衡/故障转移等可靠性模式。因此大部分的API Gateway解决方案都内置了这些特性。&lt;/p&gt;&#xA;&lt;p&gt;API Gateway也内置了以下特性的支持，包括：服务发现，分析（可见性：性能指标，监控，分布式日志，分布式调用追踪）和安全。&lt;/p&gt;&#xA;&lt;p&gt;API Gateway和API管理生态系统的其他组件的关系紧密，比如： API 市场/商店， API 发布门户。&lt;/p&gt;&#xA;&lt;h2 id=&#34;service-mesh微服务的网络通信基础设施&#34;&gt;Service Mesh：微服务的网络通信基础设施&lt;/h2&gt;&#xA;&lt;p&gt;现在我们来看看Service Mesh有哪些不同。&lt;/p&gt;&#xA;&lt;p&gt;Service Mesh是一个网络通信基础设施， 可以用于将应用层的网络通信功能从你的服务代码中剥离出来。&lt;/p&gt;&#xA;&lt;p&gt;采用Service Mesh， 你不用在服务代码中实现用于可靠通信的模式如断路，超时等，类似地，Service Mesh也提供了服务发现，服务可见性等其他功能。&lt;/p&gt;&#xA;&lt;h2 id=&#34;api-gateway和service-mesh实践&#34;&gt;API Gateway和Service Mesh实践&lt;/h2&gt;&#xA;&lt;p&gt;API Gateway和Service Mesh之间的主要不同点：API Gateway是暴露API/边界服务的关键组件，而Service Mesh则仅仅是一个服务间通信的基础设施，并不了解应用中的业务逻辑。&lt;/p&gt;&#xA;&lt;p&gt;下图说明了API Gateway和Service Mesh的关系。如同前面所说，这两者之间也有一些重叠的部分（例如断路器等），但重要的是需要理解这两者是用于完全不同的用途。&lt;/p&gt;&#xA;&lt;p&gt;图1： API Gateway和Service Mesh实践&lt;/p&gt;&#xA;&lt;p&gt;&#xD;&#xA;  &lt;img src=&#34;http://localhost:1313/img/2018-04-11-service-mesh-vs-api-gateway/service-mesh-vs-api-gateway.png&#34; alt=&#34;&#34;&gt;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;如上图所示，Service Mesh作为Sidecar（边车）和服务一起部署，它是独立于服务的业务逻辑的。&lt;/p&gt;&#xA;&lt;p&gt;另一方面，API Gateway 提供了所有的API服务（这些API服务有明确定义的业务功能），它是应用业务逻辑的一部分。API Gateway可以具有内建的服务间通信能力，但它也可以使用Service Mesh来调用下游服务（API Gateway-&amp;gt;Service Mesh-&amp;gt;Microservices）。&lt;/p&gt;&#xA;&lt;p&gt;在API管理层次，你可以使用API Gateway内建的服务间通信能力；也可以通过Service Mesh来调用下游服务，以将应用网络通信功能从应用程序转移到Service Mesh中。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
