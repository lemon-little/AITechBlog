<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on AI Tech Blog</title>
    <link>http://localhost:1313/tags/kubernetes/</link>
    <description>Recent content in Kubernetes on AI Tech Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 May 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Istio Sidecar自动注入原理</title>
      <link>http://localhost:1313/2018/05/23/istio-auto-injection-with-webhook/</link>
      <pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/05/23/istio-auto-injection-with-webhook/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Kubernets 1.9版本引入了Admission Webhook(web 回调)扩展机制，通过Webhook,开发者可以非常灵活地对Kubernets API Server的功能进行扩展，在API Server创建资源时对资源进行验证或者修改。&lt;/p&gt;&#xA;&lt;p&gt;使用webhook的优势是不需要对API Server的源码进行修改和重新编译就可以扩展其功能。插入的逻辑实现为一个独立的web进程，通过参数方式传入到kubernets中，由kubernets在进行自身逻辑处理时对扩展逻辑进行回调。&lt;/p&gt;&#xA;&lt;p&gt;Istio 0.7版本就利用了Kubernets webhook实现了sidecar的自动注入。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Helm介绍</title>
      <link>http://localhost:1313/2018/04/16/using-helm-to-deploy-to-kubernetes/</link>
      <pubDate>Mon, 16 Apr 2018 15:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/04/16/using-helm-to-deploy-to-kubernetes/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Helm是Kubernetes生态系统中的一个软件包管理工具。本文将介绍为何要使用Helm进行Kubernetes软件包管理，澄清Helm中使用到的相关概念，并通过一个具体的示例学习如何使用Helm打包，分发，安装，升级及回退Kubernetes应用。&lt;/p&gt;&#xA;&lt;h2 id=&#34;kubernetes应用部署的挑战&#34;&gt;Kubernetes应用部署的挑战&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;让我们首先来看看Kubernetes，kubernetes提供了基于容器的应用集群管理，为容器化应用提供了部署运行、资源调度、服务发现和动态伸缩等一系列完整功能。&lt;/p&gt;&#xA;&lt;p&gt;kubernetes的核心设计理念是: 用户定义应用程序的规格，而kubernetes则负责按照定义的规则部署并运行应用程序，如果应用系统出现问题导致偏离了定义的规格，kubernetes负责对其进行自动修正。例如应用规格要求部署两个实例，其中一个实例异常终止了，kubernetes会检查到并重新启动一个新的实例。&lt;/p&gt;&#xA;&lt;p&gt;用户通过使用kubernetes API对象来描述应用程序规格，包括Pod，Service，Volume，Namespace，ReplicaSet，Deployment，Job等等。一般这些对象需要写入一系列的yaml文件中，然后通过kubernetes命令行工具kubectl进行部署。&lt;/p&gt;&#xA;&lt;p&gt;以下面的wordpress应用程序为例，涉及到多个kubernetes API对象，这些kubernetes API对象分散在多个yaml文件中。&lt;/p&gt;&#xA;&lt;p&gt;图1： Wordpress应用程序中涉及到的kubernetes API对象&#xA;&#xD;&#xA;  &lt;img src=&#34;http://localhost:1313/img/2018-04-16-using-helm-to-deploy-to-kubernetes/wordpress.png&#34; alt=&#34;&#34;&gt;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;可以看到，在进行kubernetes软件部署时，我们面临下述问题：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如何管理，编辑和更新这些这些分散的kubernetes应用配置文件？&lt;/li&gt;&#xA;&lt;li&gt;如何把一套的相关配置文件作为一个应用进行管理？&lt;/li&gt;&#xA;&lt;li&gt;如何分发和重用kubernetes的应用配置？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Helm的引入很好地解决上面这些问题。&lt;/p&gt;&#xA;&lt;h2 id=&#34;helm是什么&#34;&gt;Helm是什么？&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;很多人都使用过Ubuntu下的ap-get或者CentOS下的yum, 这两者都是Linux系统下的包管理工具。采用apt-get/yum,应用开发者可以管理应用包之间的依赖关系，发布应用；用户则可以以简单的方式查找、安装、升级、卸载应用程序。&lt;/p&gt;&#xA;&lt;p&gt;我们可以将Helm看作Kubernetes下的apt-get/yum。Helm是Deis (&lt;a href=&#34;https://deis.com/&#34;&gt;https://deis.com/&lt;/a&gt;) 开发的一个用于kubernetes的包管理器。&lt;/p&gt;&#xA;&lt;p&gt;对于应用发布者而言，可以通过Helm打包应用，管理应用依赖关系，管理应用版本并发布应用到软件仓库。&lt;/p&gt;&#xA;&lt;p&gt;对于使用者而言，使用Helm后不用需要了解Kubernetes的Yaml语法并编写应用部署文件，可以通过Helm下载并在kubernetes上安装需要的应用。&lt;/p&gt;&#xA;&lt;p&gt;除此以外，Helm还提供了kubernetes上的软件部署，删除，升级，回滚应用的强大功能。&lt;/p&gt;&#xA;&lt;h2 id=&#34;helm组件及相关术语&#34;&gt;Helm组件及相关术语&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;开始接触Helm时遇到的一个常见问题就是Helm中的一些概念和术语非常让人迷惑，我开始学习Helm就遇到这个问题。&lt;/p&gt;&#xA;&lt;p&gt;因此我们先了解一下Helm的这些相关概念和术语。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Helm&lt;/p&gt;&#xA;&lt;p&gt;Kubernetes的应用打包工具，也是命令行工具的名称。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Tiller&lt;/p&gt;&#xA;&lt;p&gt;Helm的服务端，部署在Kubernetes集群中，用于处理Helm的相关命令。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Chart&lt;/p&gt;&#xA;&lt;p&gt;Helm的打包格式，内部包含了一组相关的kubernetes资源。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Repoistory&lt;/p&gt;&#xA;&lt;p&gt;Helm的软件仓库，repository本质上是一个web服务器，该服务器保存了chart软件包以供下载，并有提供一个该repository的chart包的清单文件以供查询。在使用时，Helm可以对接多个不同的Repository。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Release&lt;/p&gt;&#xA;&lt;p&gt;使用Helm install命令在Kubernetes集群中安装的Chart称为Release。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;需要特别注意的是， Helm中提到的Release和我们通常概念中的版本有所不同，这里的Release可以理解为Helm使用Chart包部署的一个应用实例。&lt;/p&gt;&#xA;&lt;p&gt;其实Helm中的Release叫做Deployment更合适。估计因为Deployment这个概念已经被Kubernetes使用了，因此Helm才采用了Release这个术语。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;下面这张图描述了Helm的几个关键组件Helm（客户端），Tiller（服务器），Repository（Chart软件仓库），Chart（软件包）之前的关系。&lt;/p&gt;&#xA;&lt;p&gt;图2： Helm软件架构&#xA;&#xD;&#xA;  &lt;img src=&#34;http://localhost:1313/img/2018-04-16-using-helm-to-deploy-to-kubernetes/helm-architecture.png&#34; alt=&#34;&#34;&gt;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;h2 id=&#34;安装helm&#34;&gt;安装Helm&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;下面我们通过一个完整的示例来介绍Helm的相关概念，并学习如何使用Helm打包，分发，安装，升级及回退kubernetes应用。&lt;/p&gt;&#xA;&lt;p&gt;可以参考Helm的帮助文档https://docs.helm.sh/using_helm/#installing-helm 安装Helm&lt;/p&gt;&#xA;&lt;p&gt;采用二进制的方式安装Helm&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;下载 Helm &lt;a href=&#34;https://github.com/kubernetes/helm/releases&#34;&gt;https://github.com/kubernetes/helm/releases&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;解压 tar -zxvf helm-v2.0.0-linux-amd64.tgz&lt;/li&gt;&#xA;&lt;li&gt;拷贝到bin目录 mv linux-amd64/helm /usr/local/bin/helm&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;然后使用下面的命令安装服务器端组件Tiller&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Helm init&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;构建一个helm-chart&#34;&gt;构建一个Helm chart&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;让我们在实践中来了解Helm。这里将使用一个Go测试小程序，让我们先为这个小程序创建一个Helm chart。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何从外部访问Kubernetes集群中的应用？</title>
      <link>http://localhost:1313/2017/11/28/access-application-from-outside/</link>
      <pubDate>Tue, 28 Nov 2017 12:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2017/11/28/access-application-from-outside/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;我们知道，kubernetes的Cluster Network属于私有网络，只能在cluster Network内部才能访问部署的应用，那如何才能将Kubernetes集群中的应用暴露到外部网络，为外部用户提供服务呢？本文探讨了从外部网络访问kubernetes cluster中应用的几种实现方式。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
